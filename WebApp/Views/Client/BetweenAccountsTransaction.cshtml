@using NetBanking.Core.Application.ViewModels.Transaction;
@using NetBanking.Core.Domain.Enums;
@model RealizeTransaction;

<h1>Cash Transfer Between Accounts</h1>
@if (Model.TransactionStatus.HasError)
{
    <h1>@Model.TransactionStatus.Error</h1>
}

<form asp-action="InitializeTransaction" method="post">
    <input asp-for="@Model.SaveTransactionViewModel.Type" value="@Model.SaveTransactionViewModel.Type" hidden />

    <label class="form-label" asp-for="@Model.SaveTransactionViewModel.EmissorProductId">Elija la cuenta de salida:</label>
    <select class="form-select" asp-for="@Model.SaveTransactionViewModel.EmissorProductId">
        @foreach (var item in Model.AllProducts.SavingsAccounts)
        {
            <option value="@item.Id" selected="@{
if(Model.SaveTransactionViewModel!= null && Model.SaveTransactionViewModel.HasError)
{
                            @Model.SaveTransactionViewModel.EmissorProductId
}
}"> Savings Account: @item.Id</option>
        }
    </select>

    <br />

    <label class="form-label" asp-for="@Model.SaveTransactionViewModel.ReceiverProductId">Elija la cuenta que recibe:</label>
    <select class="form-select" asp-for="@Model.SaveTransactionViewModel.ReceiverProductId">
        @foreach (var item in Model.AllProducts.SavingsAccounts)
        {
            <option value="@item.Id" selected="@{
if(Model.SaveTransactionViewModel!= null && Model.SaveTransactionViewModel.HasError)
{
                            @Model.SaveTransactionViewModel.ReceiverProductId
}
}">Savings account: @item.Id</option>
        }
        
    </select>

    <br />

    <label class="form-label" asp-for="@Model.SaveTransactionViewModel.Cantity">Cantidad</label>
    <input type="number" asp-for="@Model.SaveTransactionViewModel.Cantity" placeholder="@{
if(Model.SaveTransactionViewModel!= null && Model.SaveTransactionViewModel.HasError)
{
                        @Model.SaveTransactionViewModel.Cantity
}
}" />
    <br />

    <input type="submit" />
</form>
